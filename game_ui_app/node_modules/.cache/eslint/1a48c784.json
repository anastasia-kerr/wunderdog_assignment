[{"C:\\dev\\assignment\\game_ui_app\\src\\main.ts":"1","C:\\dev\\assignment\\game_ui_app\\src\\plugins\\vuetify.ts":"2","C:\\dev\\assignment\\game_ui_app\\src\\App.vue":"3","C:\\dev\\assignment\\game_ui_app\\src\\router\\index.ts":"4","C:\\dev\\assignment\\game_ui_app\\src\\store\\index.ts":"5","C:\\dev\\assignment\\game_ui_app\\src\\api\\index.ts":"6","C:\\dev\\assignment\\game_ui_app\\src\\store\\getters.ts":"7","C:\\dev\\assignment\\game_ui_app\\src\\store\\mutations.ts":"8","C:\\dev\\assignment\\game_ui_app\\src\\views\\HomeView.vue":"9","C:\\dev\\assignment\\game_ui_app\\src\\store\\actions.ts":"10","C:\\dev\\assignment\\game_ui_app\\src\\components\\CreateGame.vue":"11","C:\\dev\\assignment\\game_ui_app\\src\\views\\GamePlayView.vue":"12","C:\\dev\\assignment\\game_ui_app\\src\\api\\helpers.ts":"13","C:\\dev\\assignment\\game_ui_app\\src\\components\\LandingPage.vue":"14","C:\\dev\\assignment\\game_ui_app\\src\\components\\AppBar.vue":"15","C:\\dev\\assignment\\game_ui_app\\src\\components\\GamePlay.vue":"16","C:\\dev\\assignment\\game_ui_app\\src\\configs\\index.ts":"17","C:\\dev\\assignment\\game_ui_app\\src\\components\\UserMenu.vue":"18","C:\\dev\\assignment\\game_ui_app\\src\\validators\\index.ts":"19","C:\\dev\\assignment\\game_ui_app\\src\\components\\dialogs\\InvitePlayerDialog.vue":"20","C:\\dev\\assignment\\game_ui_app\\src\\components\\dialogs\\RoundResultDialog.vue":"21","C:\\dev\\assignment\\game_ui_app\\src\\components\\dialogs\\NicknameDialog.vue":"22","C:\\dev\\assignment\\game_ui_app\\src\\types\\index.ts":"23"},{"size":358,"mtime":1671055150068,"results":"24","hashOfConfig":"25"},{"size":151,"mtime":1673438741593,"results":"26","hashOfConfig":"25"},{"size":353,"mtime":1671320656465,"results":"27","hashOfConfig":"25"},{"size":631,"mtime":1671193592960,"results":"28","hashOfConfig":"25"},{"size":593,"mtime":1671368569770,"results":"29","hashOfConfig":"25"},{"size":2833,"mtime":1673438553865,"results":"30","hashOfConfig":"25"},{"size":959,"mtime":1671373275088,"results":"31","hashOfConfig":"25"},{"size":932,"mtime":1671369056974,"results":"32","hashOfConfig":"25"},{"size":239,"mtime":1671051115885,"results":"33","hashOfConfig":"25"},{"size":2642,"mtime":1671483571075,"results":"34","hashOfConfig":"25"},{"size":2434,"mtime":1671480975673,"results":"35","hashOfConfig":"25"},{"size":1339,"mtime":1671480131573,"results":"36","hashOfConfig":"25"},{"size":391,"mtime":1671319901454,"results":"37","hashOfConfig":"25"},{"size":1768,"mtime":1673438643158,"results":"38","hashOfConfig":"25"},{"size":704,"mtime":1671480434061,"results":"39","hashOfConfig":"25"},{"size":2277,"mtime":1671480322883,"results":"40","hashOfConfig":"25"},{"size":536,"mtime":1671452170096,"results":"41","hashOfConfig":"25"},{"size":1102,"mtime":1671480399220,"results":"42","hashOfConfig":"25"},{"size":201,"mtime":1671404635936,"results":"43","hashOfConfig":"25"},{"size":1385,"mtime":1671483485360,"results":"44","hashOfConfig":"25"},{"size":2315,"mtime":1671373499859,"results":"45","hashOfConfig":"25"},{"size":1313,"mtime":1671139505666,"results":"46","hashOfConfig":"25"},{"size":78,"mtime":1671187554812,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"i2kx2e",{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\dev\\assignment\\game_ui_app\\src\\main.ts",[],"C:\\dev\\assignment\\game_ui_app\\src\\plugins\\vuetify.ts",[],"C:\\dev\\assignment\\game_ui_app\\src\\App.vue",[],"C:\\dev\\assignment\\game_ui_app\\src\\router\\index.ts",[],"C:\\dev\\assignment\\game_ui_app\\src\\store\\index.ts",[],"C:\\dev\\assignment\\game_ui_app\\src\\api\\index.ts",[],"C:\\dev\\assignment\\game_ui_app\\src\\store\\getters.ts",[],"C:\\dev\\assignment\\game_ui_app\\src\\store\\mutations.ts",["101"],"import { MutationTree } from 'vuex'\nimport { RootState } from './types'\n\nconst mutations: MutationTree<RootState> = {\n  setGameId (state, id: string) {\n    state.gameId = id\n  },\n  setError (state, error: string) {\n    state.error = error\n  },\n  resetGameState (state) {\n    state.currentPlayers = []\n    state.roundResults = {}\n    state.roundNumber = 0\n    state.gameWinner = ''\n    state.error = ''\n  },\n  setGameResult (state, gameWinner:string) {\n    state.gameWinner = gameWinner\n  },\n  setNickname (state, nickname: string) {\n    state.nickname = nickname\n    state.playerIdentifier = nickname + Date.now().toString()\n  },\n  setRoundNumber (state, roundNumber: number) {\n    state.roundNumber = roundNumber\n  },\n  setCurrentPlayers (state, currentPlayers: string[]) {\n    state.currentPlayers = currentPlayers\n  },\n  setCurrentRoundResults (state, result:any) {\n    state.roundResults = result\n  }\n}\nexport default mutations\n","C:\\dev\\assignment\\game_ui_app\\src\\views\\HomeView.vue",[],"C:\\dev\\assignment\\game_ui_app\\src\\store\\actions.ts",["102"],"import { ActionTree } from 'vuex'\nimport { RootState } from './types'\nimport { leaveCurrentRound, joinCurrentRound, getCurrentRoundPlayers, getRoundResults, getGameResult, placeGesture } from '@/api'\nimport { poll } from '@/api/helpers'\n\nconst actions: ActionTree<RootState, RootState> = {\n  setUser (context, nickname: string) {\n    context.commit('setNickname', nickname)\n    localStorage.setItem('nickname', nickname ?? '')\n    localStorage.setItem('playerIdentifier', nickname ? nickname + Date.now().toString() : '')\n  },\n  async leaveGame ({ state, dispatch }) {\n    if (state.playerIdentifier) {\n      await leaveCurrentRound({ gameId: state.gameId, playerIdentifier: state.playerIdentifier })\n    }\n    dispatch('setUser', '')\n  },\n  async joinCurrentRound ({ state, commit, dispatch }) {\n    if (!state.playerIdentifier || !state.nickname) {\n      throw new Error('Player must have some identifier or name')\n    }\n\n    try {\n      const roundNumber = await joinCurrentRound({\n        gameId: state.gameId,\n        playerNickname: state.nickname,\n        playerIdentifier: state.playerIdentifier\n      })\n\n      commit('resetGameState')\n      commit('setRoundNumber', roundNumber)\n\n      dispatch('setCurrentPlayers')\n    } catch (error : any) {\n      commit('setError', error?.response?.data?.Errors)\n    }\n  },\n  async setCurrentPlayers ({ commit, state }) {\n    return await poll(async () => {\n      const result = await getCurrentRoundPlayers(state.gameId)\n      if (result.length === 2) {\n        commit('setCurrentPlayers', result)\n        return true\n      } else if (state.currentPlayers.length === 2) {\n        return true\n      }\n      return false\n    })\n  },\n  async setCurrentRoundResults ({ state, commit, dispatch }) {\n    return await poll(async () => {\n      const response = await getRoundResults(state.gameId, state.roundNumber)\n      if (response.succeeded) {\n        commit('setCurrentRoundResults', response.result)\n        if (response.result.isLastRound) {\n          dispatch('setGameResult')\n        }\n        return true\n      }\n      return false\n    })\n  },\n  async setGameResult ({ commit, state }) {\n    const response = await getGameResult(state.gameId)\n    commit('setGameResult', response.result.winnerNickname)\n  },\n  async placeGesture (context, payload: { gesture: number }) {\n    if (context.state.playerIdentifier && context.state.nickname) {\n      await placeGesture({\n        gameId: context.state.gameId,\n        playerNickname: context.state.nickname,\n        playerIdentifier: context.state.playerIdentifier,\n        roundGesture: payload.gesture\n      })\n    }\n  }\n}\nexport default actions\n","C:\\dev\\assignment\\game_ui_app\\src\\components\\CreateGame.vue",["103"],"<template>\n  <v-form id=\"create_game\" ref=\"form\" v-model=\"valid\">\n    <v-container>\n      <v-card class=\"mb-4\">\n        <v-card-text>\n          <v-row class=\"text-center\">\n            <v-col>\n              <v-text-field\n                id=\"create_game__nickname_input\"\n                :rules=\"nicknameRules\"\n                :label=\"nicknameLabel\"\n                outlined\n                v-model=\"nickname\"\n              />\n            </v-col>\n            <v-col :cols=\"2\">\n              <v-text-field\n                id=\"create_game__round_input\"\n                :min=\"0\"\n                :rules=\"roundsRules\"\n                :label=\"roundsLabel\"\n                outlined\n                type=\"number\"\n                v-model=\"rounds\"\n              />\n            </v-col>\n          </v-row>\n        </v-card-text>\n      </v-card>\n      <v-row class=\"text-center\">\n        <v-col class=\"mb-4\">\n          <v-btn\n            id=\"create_game__button\"\n            :disabled=\"isBtnDisabled\"\n            @click=\"onBtnPress\"\n            color=\"primary\"\n            x-large\n            fab\n          >\n            <v-icon> mdi-play </v-icon>\n          </v-btn>\n        </v-col>\n      </v-row>\n    </v-container>\n  </v-form>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\nimport { createGame } from '../api'\nimport { nameIsRequired, roundIsRequired } from '../validators'\n\nexport default Vue.extend({\n  name: 'CreateGame',\n\n  data: () => ({\n    valid: false,\n    nickname: localStorage.getItem('nickname') || '',\n    nicknameLabel: 'Nickname',\n    nicknameRules: [nameIsRequired],\n    roundsLabel: 'Rounds',\n    rounds: 3,\n    roundsRules: [roundIsRequired],\n    btnLabel: 'Start game'\n  }),\n  created () {\n    this.$store.commit('resetGameState')\n  },\n  computed: {\n    isBtnDisabled (): boolean {\n      return !this.nickname || !this.rounds\n    }\n  },\n  methods: {\n    async onBtnPress (): Promise<void> {\n      this.validateForm()\n      if (!this.valid) return\n      const result = await createGame({\n        nickname: this.nickname,\n        numberOfRounds: this.rounds\n      })\n      const gameId = result.toString()\n      await this.$store.dispatch('setUser', this.nickname)\n      this.$store.commit('setGameId', gameId)\n\n      this.$router.push({ name: 'game', params: { id: gameId } })\n    },\n    validateForm (): void {\n      const form = this.$refs.form as Vue & { validate: any }\n      form.validate()\n    }\n  }\n})\n</script>\n","C:\\dev\\assignment\\game_ui_app\\src\\views\\GamePlayView.vue",[],"C:\\dev\\assignment\\game_ui_app\\src\\api\\helpers.ts",["104"],"import config from '../configs'\r\n\r\nexport const poll = async (callback:() => Promise<any>) => {\r\n  let pollCount = 0\r\n  const handler = async () => {\r\n    pollCount++\r\n    const result = await callback()\r\n    if (result || pollCount === config.maxPollingTimeInSeconds) {\r\n      clearInterval(intervalId)\r\n    }\r\n  }\r\n  const intervalId = setInterval(handler, config.pollingIntervalInMs)\r\n}\r\n","C:\\dev\\assignment\\game_ui_app\\src\\components\\LandingPage.vue",[],"C:\\dev\\assignment\\game_ui_app\\src\\components\\AppBar.vue",[],"C:\\dev\\assignment\\game_ui_app\\src\\components\\GamePlay.vue",["105","106"],"<template>\r\n  <v-container>\r\n    <v-row no-gutters>\r\n      <v-col v-for=\"gesture in availableGestures\" :key=\"gesture.text\">\r\n        <v-card\r\n          :color=\"isGestureSelected(gesture) ? 'primary' : 'grey'\"\r\n          :elevation=\"isGestureSelected(gesture) ? '1' : '6'\"\r\n          @click=\"() => selectGesture(gesture)\"\r\n          :max-width=\"maxCardSize\"\r\n          :min-height=\"maxCardSize\"\r\n          :max-height=\"maxCardSize\"\r\n        >\r\n          <v-card-text>\r\n            <h1>{{ gesture.text }}</h1>\r\n            <img :src=\"gesture.img\" class=\"pt-2\" :alt=\"gesture.text\" />\r\n          </v-card-text>\r\n        </v-card>\r\n      </v-col>\r\n    </v-row>\r\n    <v-row>\r\n      <v-col class=\"mb-4\">\r\n        <v-btn\r\n          id=\"play_game_button\"\r\n          :loading=\"submittingGesture\"\r\n          :disabled=\"isBtnDisabled\"\r\n          :color=\"isBtnDisabled ? 'secondary' : 'primary'\"\r\n          fab\r\n          @click=\"playRound\"\r\n        >\r\n          <v-icon> mdi-play </v-icon>\r\n        </v-btn>\r\n        <round-result-dialog v-if=\"showResult\" @closed=\"showResult = false\" />\r\n      </v-col>\r\n    </v-row>\r\n  </v-container>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport Vue from 'vue'\r\nimport config from '../configs'\r\nimport RoundResultDialog from './dialogs/RoundResultDialog.vue'\r\n\r\nexport default Vue.extend({\r\n  name: 'GamePlay',\r\n  components: { RoundResultDialog },\r\n  data: () => ({\r\n    maxCardSize: 250,\r\n    imgWidth: 200,\r\n    btnLabel: 'Start game',\r\n    submittingGesture: false,\r\n    showResult: false,\r\n    selectedGesture: {} as { value?: number },\r\n    availableGestures: config.availableGestures\r\n  }),\r\n  computed: {\r\n    isBtnDisabled (): boolean {\r\n      return this.selectedGesture.value === undefined\r\n    }\r\n  },\r\n  methods: {\r\n    isGestureSelected (gesture: any): boolean {\r\n      return this.selectedGesture === gesture\r\n    },\r\n    selectGesture (gesture: any): void {\r\n      this.selectedGesture = gesture\r\n    },\r\n    async playRound (): Promise<void> {\r\n      if (this.isBtnDisabled) return\r\n      this.submittingGesture = true\r\n      await this.$store.dispatch('placeGesture', { gesture: this.selectedGesture.value })\r\n      this.submittingGesture = false\r\n      this.showResult = true\r\n      this.selectedGesture = {}\r\n    }\r\n  }\r\n})\r\n</script>\r\n","C:\\dev\\assignment\\game_ui_app\\src\\configs\\index.ts",[],"C:\\dev\\assignment\\game_ui_app\\src\\components\\UserMenu.vue",[],"C:\\dev\\assignment\\game_ui_app\\src\\validators\\index.ts",["107","108"],"export const nameIsRequired = (value: any) => !!value || 'Please tell us your nickname'\r\nexport const roundIsRequired = (value: any) => (+value) !== 0 || 'You need to play at least one round, buddy!'\r\n","C:\\dev\\assignment\\game_ui_app\\src\\components\\dialogs\\InvitePlayerDialog.vue",[],"C:\\dev\\assignment\\game_ui_app\\src\\components\\dialogs\\RoundResultDialog.vue",[],"C:\\dev\\assignment\\game_ui_app\\src\\components\\dialogs\\NicknameDialog.vue",["109"],"<template>\n  <v-dialog :width=\"dialogSize\" persistent v-model=\"dialog\">\n    <v-form ref=\"form\" v-model=\"valid\">\n      <v-card>\n        <v-card-title v-text=\"headerLabel\" />\n        <v-card-text>\n          <v-text-field :label=\"nicknameLabel\" outlined v-model=\"nickname\" :rules=\"nicknameRules\" />\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer />\n          <v-btn color=\"primary\" v-text=\"btnLabel\" @click=\"onBtnPress\" />\n        </v-card-actions>\n      </v-card>\n    </v-form>\n  </v-dialog>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\nimport { nameIsRequired } from '../../validators'\nimport config from '../../configs'\nconst { smallDialogSize } = config\n\nexport default Vue.extend({\n  name: 'NicknameDialog',\n\n  data: () => ({\n    dialog: true,\n    valid: false,\n    dialogSize: smallDialogSize,\n    nickname: '',\n    nicknameLabel: 'Nickname',\n    nicknameRules: [nameIsRequired],\n    headerLabel: 'Choose your display name',\n    btnLabel: 'Continue to game'\n  }),\n  methods: {\n    validateForm (): void {\n      const form = this.$refs.form as Vue & { validate: any }\n      form.validate()\n    },\n    onBtnPress (): void {\n      this.validateForm()\n      if (!this.valid) return\n      this.dialog = false\n      this.$store.dispatch('setUser', this.nickname)\n    }\n  }\n})\n</script>\n","C:\\dev\\assignment\\game_ui_app\\src\\types\\index.ts",[],{"ruleId":"110","severity":1,"message":"111","line":31,"column":41,"nodeType":"112","messageId":"113","endLine":31,"endColumn":44,"suggestions":"114"},{"ruleId":"110","severity":1,"message":"111","line":34,"column":22,"nodeType":"112","messageId":"113","endLine":34,"endColumn":25,"suggestions":"115"},{"ruleId":"110","severity":1,"message":"111","line":89,"column":57,"nodeType":"112","messageId":"113","endLine":89,"endColumn":60,"suggestions":"116"},{"ruleId":"110","severity":1,"message":"111","line":3,"column":51,"nodeType":"112","messageId":"113","endLine":3,"endColumn":54,"suggestions":"117"},{"ruleId":"110","severity":1,"message":"111","line":61,"column":33,"nodeType":"112","messageId":"113","endLine":61,"endColumn":36,"suggestions":"118"},{"ruleId":"110","severity":1,"message":"111","line":64,"column":29,"nodeType":"112","messageId":"113","endLine":64,"endColumn":32,"suggestions":"119"},{"ruleId":"110","severity":1,"message":"111","line":1,"column":39,"nodeType":"112","messageId":"113","endLine":1,"endColumn":42,"suggestions":"120"},{"ruleId":"110","severity":1,"message":"111","line":2,"column":40,"nodeType":"112","messageId":"113","endLine":2,"endColumn":43,"suggestions":"121"},{"ruleId":"110","severity":1,"message":"111","line":39,"column":57,"nodeType":"112","messageId":"113","endLine":39,"endColumn":60,"suggestions":"122"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["123","124"],["125","126"],["127","128"],["129","130"],["131","132"],["133","134"],["135","136"],["137","138"],["139","140"],{"messageId":"141","fix":"142","desc":"143"},{"messageId":"144","fix":"145","desc":"146"},{"messageId":"141","fix":"147","desc":"143"},{"messageId":"144","fix":"148","desc":"146"},{"messageId":"141","fix":"149","desc":"143"},{"messageId":"144","fix":"150","desc":"146"},{"messageId":"141","fix":"151","desc":"143"},{"messageId":"144","fix":"152","desc":"146"},{"messageId":"141","fix":"153","desc":"143"},{"messageId":"144","fix":"154","desc":"146"},{"messageId":"141","fix":"155","desc":"143"},{"messageId":"144","fix":"156","desc":"146"},{"messageId":"141","fix":"157","desc":"143"},{"messageId":"144","fix":"158","desc":"146"},{"messageId":"141","fix":"159","desc":"143"},{"messageId":"144","fix":"160","desc":"146"},{"messageId":"141","fix":"161","desc":"143"},{"messageId":"144","fix":"162","desc":"146"},"suggestUnknown",{"range":"163","text":"164"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"163","text":"165"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"166","text":"164"},{"range":"166","text":"165"},{"range":"167","text":"164"},{"range":"167","text":"165"},{"range":"168","text":"164"},{"range":"168","text":"165"},{"range":"169","text":"164"},{"range":"169","text":"165"},{"range":"170","text":"164"},{"range":"170","text":"165"},{"range":"171","text":"164"},{"range":"171","text":"165"},{"range":"172","text":"164"},{"range":"172","text":"165"},{"range":"173","text":"164"},{"range":"173","text":"165"},[862,865],"unknown","never",[1247,1250],[2383,2386],[85,88],[1782,1785],[1882,1885],[38,41],[128,131],[1094,1097]]